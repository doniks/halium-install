#!/bin/bash
#
# Halium installer script
# =======================
#
# Copyright (C) 2017 JBBgameich
# Copyright (C) 2017 TheWiseNerd
#
# License: GPLv3
#
# dependencies: qemu binfmt-support qemu-user-static e2fsprogs sudo simg2img

set -e # terminate on errors

LOCATION="$(dirname "$(readlink -f "$0")")"

# Defaults
export ROOTFS_RELEASE="none"
export INSTALL_MODE="img"
export DO_COPY_SSH_KEY=false
export SSH_KEY=~/.ssh/id_rsa.pub
export DO_ROOTFS=true
export DO_AND_IMAGE=true

function quiet () {
	cat > /dev/null
}

out=quiet

# Include functions
source $LOCATION/functions/misc.sh

# parse options
while [ -n "$1" ] ; do
	case "$1" in
	"-p")
		shift
		export ROOTFS_RELEASE="$1"
		case $ROOTFS_RELEASE in
		"halium" | "debian-pm" | "reference" | "debian-pm-caf" | "pm" | "neon" | "ut" | "none")
			;;
		*)
			echo "Unsupported post install release! Exiting now"
			exit 1
			;;
		esac
		;;
	"-m" | "--mode")
		shift
		export INSTALL_MODE="$1"
		case $INSTALL_MODE in
		"img" | "dir" )
			;;
		*)
			echo "Unsupported install mode! Exiting now"
			exit 1
			;;
		esac
		;;
	"-u")
		shift
		USERPASSWORD="$1"
		;;
	"-r")
		shift
		ROOTPASSWORD="$1"
		;;
	"-i")
		DO_COPY_SSH_KEY=true
		;;
	"-S")
		# do only the android system img, not the rootfs
		DO_ROOTFS=false
		;;
	"-v")
		out="cat -"
		;;
	*)
		break
		;;
	esac
	shift
done

# parse positional parameters
echo "Debug: Prepare and install rootfs: $DO_ROOTFS"
if $DO_ROOTFS ; then
	if [ $# -lt 1 ] ; then
		echo "Error: Name of rootfs archive is missing"
		usage
		exit 1
	fi
	export ROOTFS_TAR=$1
	shift
	if [ ! -f "$ROOTFS_TAR" ] ; then
		echo "Error: Cannot find rootfs archive \"$ROOTFS_TAR\""
		usage
		exit 1
	fi
	echo "Debug: Chosen rootfs is $ROOTFS_TAR"
	echo "Debug: Chosen release is $ROOTFS_RELEASE"
fi

echo "Debug: Convert and install android system image: $DO_AND_IMAGE"
if $DO_AND_IMAGE ; then
	if [ $# -lt 1 ] ; then
		echo "Error: Name of android system image is missing"
		usage
		exit 1
	fi
	export AND_IMAGE=$1
	shift
	if [ ! -f "$AND_IMAGE" ]; then
		echo "Error: Cannot find android system image \"$AND_IMAGE\""
		usage
		exit 1
	fi
	echo "Debug: Chosen android image is $AND_IMAGE"
fi

# Check for missing dependencies
if ! init_checks; then
	exit
fi

export ROOTFS_DIR=$(mktemp -d .halium-install-rootfs.XXXXX)
export IMAGE_DIR=$(mktemp -d .halium-install-imgs.XXXXX)

# Logic that depends on the opts being parsed
source $LOCATION/functions/distributions.sh
source $LOCATION/functions/core.sh

# Start installer
echo

if $DO_ROOTFS ; then
	case "$INSTALL_MODE" in
	"img")
		echo "I: Writing rootfs into mountable image"
		convert_rootfs_to_img $IMAGE_SIZE 2>&1 | $out
		;;
	"dir")
		echo "I: Extracting rootfs"
		convert_rootfs_to_dir 2>&1 | $out
		;;
	esac

	echo "I: Running post installation tasks"
	post_install $ROOTFS_RELEASE
fi


if $DO_AND_IMAGE ; then
	echo "I: Writing android image into mountable image"
	convert_androidimage 2>&1 | $out

	echo "I: Shrinking android image"
	shrink_android_img
fi


case "$INSTALL_MODE" in
"img")
	if $DO_ROOTFS ; then
		echo "I: Unmounting rootfs"
		unmount_rootfs

		echo "I: Pushing rootfs to /data via ADB"
		flash_rootfs_img
	fi
	if $DO_AND_IMAGE ; then
		echo "I: Pushing android image to /data via ADB"
		flash_android_img
	fi
	;;
"dir")
	echo FIXME
	exit 1
	echo "I: Pushing rootfs and android image to /data via ADB"


	echo "I: Injecting android image into rootfs"
	inject_androidimage

	if ! flash_dir ; then
		echo "Error: Couldn't copy the files to the device, is it connected?"
	fi
	;;
esac

echo "I: Cleaning up host"
clean

echo "I: Cleaning up device"
clean_device

echo "I: Finished successfully"

